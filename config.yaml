# file_paths:
main:
  project_name: Loan_Default_Prediction
  # experiment_name: dev_2
  steps: loader,exploration,preprocessing,model_

data_load:
  file_path: /workspaces/DEVOPS_fINAL_PROJECT/data/raw/bankloan.csv
  artifact_name: raw_bankloan_data
  sheet_name: bankloan
  artifact_type: raw_data
  artifact_description: ""

explore_data:
  report_title: "Exploratory Data Analysis Report"
  output_file: /workspaces/reports/output_exploration_report.html
  expected_columns: ['age', 'ed', 'employ', 'address', 'income', 'debtinc', 'creddebt', 'othdebt', 'default']
  columns: ['age', 'ed', 'employ', 'address', 'income', 'debtinc', 'creddebt', 'othdebt', 'default']
  output_artifact_name: exploration_report
  output_artifact_type: report
  output_artifact_description: "Exploratory Data Analysis Report"


preprocess_data:
  # input_artifact: raw_bankloan_data:latest
  drop_columns: []
  factorize_columns: ['ed']
  standardize_columns: ['income debtinc creddebt othdebt']
  output_artifact_name: processed_bankloan_data
  output_artifact_type: processed_data
  output_artifact_description: "Processed Bankloan Data"


def main(args):
    """
    The main entry point of the application that performs data splitting,
    model training, and evaluation based on the provided command line arguments.
    """
    wandb.init(job_type="model_training")

    # Path to the input artifact
    input_artifact = wandb.use_artifact(args.input_artifact)
    input_artifact_path = input_artifact.file()

    try:
        # Load input artifact (cleaned data)
        df = pd.read_csv(input_artifact_path)

        # Perform model building
        evaluation_metrics = perform_model_building(
            df=df,
            target_column=args.target_column,
            test_size=args.test_size,
            random_state=args.random_state,
            class_weight=args.class_weight,
        )

        # Output the evaluation metrics
        print(evaluation_metrics)

        # Save and log the model as an artifact
        model_path = "reports/Logistic_Regression_model.joblib"
        model_artifact = wandb.Artifact(
            args.output_artifact_name, 
            type="model",
            description="Trained model artifact"
        )
        model_artifact.add_file(model_path)
        wandb.log_artifact(model_artifact)

        # Save and log all files in the reports folder as an artifact
        reports_artifact = wandb.Artifact(
            "evaluation_metrics", 
            type="metrics",
            description="Evaluation metrics of the model"
        )
        reports_artifact.add_dir("reports/")
        wandb.log_artifact(reports_artifact)

    except Exception as e:
        logging.error(f"An error occurred in the main function: {e}")
        raise


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Machine Learning Model Building and Evaluation")
    
    parser.add_argument(
        "--input_artifact",
        type=str,
        required=True,
        help="Name for the input artifact"
    )
    parser.add_argument(
        "--target_column",
        type=str,
        required=True,
        help="Name of the target column"
    )
    parser.add_argument(
        "--test_size",
        type=float,
        default=0.2,
        help="Size of the test set."
    )
    parser.add_argument(
        "--random_state",
        type=int,
        default=42,
        help="The random state for reproducibility."
    )
    parser.add_argument(
        "--class_weight",
        default=None,
        help="Class weights for imbalanced datasets."
    )
    parser.add_argument(
        "--output_artifact_name",
        type=str,
        required=True,
        help="Name for the output artifact"
    )
    parser.add_argument(
        "--output_artifact_type",
        type=str,
        required=True,
        help="Type of the output artifact"
    )
    parser.add_argument(
        "--output_artifact_description",
        type=str,
        help="Description for the output artifact"
    )
    
    args = parser.parse_args()
    main(args)

train_model:
  # input_artifact: processed_bankloan_data:latest
  target_column: default
  test_size: 0.2
  random_state: 42
  class_weight: balanced
  output_artifact_name: trained_model
  output_artifact_type: model
  output_artifact_description: "Trained Logistic Regression Model"

logging:
  format: "%(asctime)s [%(levelname)s] %(message)s"
  level: INFO


#   output_file: output_profile_report.html



# profile_report:
#   title: Profiling Report

# expected_columns:
#   - age
#   - ed
#   - employ
#   - address
#   - income
#   - debtinc
#   - creddebt
#   - othdebt
#   - default

# factorize_columns:
#   - ed

# standardize_columns:
#   - income
#   - debtinc
#   - creddebt
#   - othdebt
